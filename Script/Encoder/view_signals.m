%% ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏î‡∏π‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≤‡∏Å .mat (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì + sync ‡πÄ‡∏ß‡∏•‡∏≤ + ‡πÄ‡∏™‡πâ‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ + ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏î)
clc; clear; close all;

% üîπ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
[filename, pathname] = uigetfile('*.mat', '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (.mat)');
if isequal(filename, 0)
    disp('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
    return;
end
fullpath = fullfile(pathname, filename);
load(fullpath);

% üîπ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Dataset
vars = whos;
datasetName = '';
for i = 1:length(vars)
    if strcmp(vars(i).class, 'Simulink.SimulationData.Dataset')
        datasetName = vars(i).name;
        break;
    end
end
if isempty(datasetName)
    error('‡πÑ‡∏°‡πà‡∏û‡∏ö Dataset ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ');
end
data = eval(datasetName);

% üîπ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠)
numSignals = data.numElements;
signalNames = cell(1, numSignals);
for i = 1:numSignals
    sig = data.get(i);
    % ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°
    if ~isempty(sig.Name)
        signalNames{i} = sprintf('%d: %s', i, sig.Name);
    % ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏ï‡πà‡∏°‡∏µ BlockPath ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏ó‡∏ô
    elseif ~isempty(sig.BlockPath)
        try
            blkName = sig.BlockPath.getBlock(1);
            signalNames{i} = sprintf('%d: [NoName] %s', i, blkName);
        catch
            signalNames{i} = sprintf('%d: [NoName]', i);
        end
    else
        % ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        signalNames{i} = sprintf('%d: [Signal_%d]', i, i);
    end
end

% üîπ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
[idx, tf] = listdlg('PromptString', '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π:', ...
                    'SelectionMode', 'multiple', ...
                    'ListString', signalNames, ...
                    'ListSize', [350 300]);
if ~tf
    disp('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
    return;
end

% üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
figure('Name', ['Signal Viewer: ' filename], 'NumberTitle', 'off');
tiledlayout(length(idx), 1, 'Padding', 'compact', 'TileSpacing', 'compact');
ax = gobjects(length(idx),1);
lines = cell(length(idx),1);
texts = gobjects(length(idx),1);

for k = 1:length(idx)
    sig = data.get(idx(k));
    val = sig.Values;

    % üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå Time ‡πÅ‡∏•‡∏∞ Data
    if ~isprop(val, 'Time') || ~isprop(val, 'Data')
        warning('‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì %d: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Time ‡∏´‡∏£‡∏∑‡∏≠ Data', k);
        continue;
    end

    t = val.Time;
    y = val.Data;

    % üîπ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡∏°‡∏¥‡∏ï‡∏¥ (‡πÄ‡∏ä‡πà‡∏ô 1x1xN) ‚Üí ‡∏ö‡∏µ‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1 ‡∏°‡∏¥‡∏ï‡∏¥
    if ndims(y) > 2
        y = squeeze(y);
    end

    % üîπ ‡∏ñ‡πâ‡∏≤ y ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå (‡πÄ‡∏ä‡πà‡∏ô NxM) ‡πÉ‡∏´‡πâ plot ‡∏ó‡∏µ‡∏•‡∏∞ column
    ax(k) = nexttile;
    hold(ax(k), 'on');
    if ismatrix(y) && size(y,2) > 1
        for c = 1:size(y,2)
            plot(ax(k), t, y(:,c), 'LineWidth', 1.2, 'DisplayName', sprintf('Col %d', c));
        end
        legend(ax(k), 'show');
    else
        plot(ax(k), t, y, 'LineWidth', 1.2);
    end

    grid(ax(k), 'on');
    xlabel(ax(k), 'Time (s)');

    % üîπ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ signal ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    if isempty(sig.Name)
        sigName = sprintf('Signal %d', idx(k));
    else
        sigName = sig.Name;
    end

    ylabel(ax(k), sigName, 'Interpreter', 'none');
    title(ax(k), sigName, 'Interpreter', 'none');

    lines{k} = findobj(ax(k), 'Type', 'Line');
    texts(k) = text(ax(k), NaN, NaN, '', 'Color', 'r', 'FontSize', 9, 'FontWeight', 'bold', ...
                    'BackgroundColor', 'w', 'Margin', 2);
    hold(ax(k), 'off');
end


sgtitle(['Selected Signals from ', filename], 'Interpreter', 'none');
linkaxes(ax, 'x');

% üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
cursorLines = gobjects(length(ax), 1);
for k = 1:length(ax)
    yl = ylim(ax(k));
    cursorLines(k) = line(ax(k), [NaN NaN], yl, 'Color', 'r', 'LineStyle', '--', 'LineWidth', 1);
end

% üîπ ‡∏ï‡∏±‡πâ‡∏á callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô
set(gcf, 'WindowButtonDownFcn', @(src, event) startCursorDrag(src, ax, cursorLines, lines, texts));

disp('‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß!');

% ==========================================================
% üî∏ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πà‡∏≠‡∏¢
function startCursorDrag(fig, ax, cursorLines, lines, texts)
    cp = get(ax(1), 'CurrentPoint');
    xClick = cp(1,1);
    updateCursor(xClick, ax, cursorLines, lines, texts);
    set(fig, 'WindowButtonMotionFcn', @(~,~) motionFcn(ax, cursorLines, lines, texts));
    set(fig, 'WindowButtonUpFcn', @(~,~) stopCursorDrag(fig));
end

function motionFcn(ax, cursorLines, lines, texts)
    cp = get(ax(1), 'CurrentPoint');
    xNow = cp(1,1);
    updateCursor(xNow, ax, cursorLines, lines, texts);
end

function stopCursorDrag(fig)
    set(fig, 'WindowButtonMotionFcn', '');
    set(fig, 'WindowButtonUpFcn', '');
end

function updateCursor(xPos, ax, cursorLines, lines, texts)
    for k = 1:length(ax)
        yl = ylim(ax(k));
        set(cursorLines(k), 'XData', [xPos xPos], 'YData', yl);

        t = lines{k}.XData;
        y = lines{k}.YData;
        if isempty(t) || isempty(y), continue; end

        [~, idx] = min(abs(t - xPos));
        yVal = y(idx);

        if ~isnan(yVal)
            set(texts(k), 'Position', [xPos, yVal], ...
                          'String', sprintf('t=%.3f s\ny=%.3f', t(idx), yVal));
        else
            set(texts(k), 'String', '');
        end
    end
end
